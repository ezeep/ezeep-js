////
/// @group utils
/// @author chgoe
////

@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use 'sass:math';
@use './global';

/// Convert an absolute RGB channel value to a relative decimal value.
///
/// @since 1.0.0
///
/// @param {number} $channelValue - Absolute RGB channel value `(0..255)`.
/// @return {number}
@function calcColorChannelRelative($channelValue) {
  @return math.div(math.round(math.div($channelValue, 255) * 1000), 1000);
}

/// Convert a color to a Display P3 color function.
///
/// @since 1.0.0
///
/// @param {color} $color - A color.
/// @return {string}
@function convertColorDisplayP3($color) {
  $red: calcColorChannelRelative(color.red($color));
  $green: calcColorChannelRelative(color.green($color));
  $blue: calcColorChannelRelative(color.blue($color));
  $alpha: color.alpha($color) * 100%;

  @return color(display-p3 #{$red} #{$green} #{$blue} / #{$alpha});
}

/// Declare colors for a specific appearance
///
/// @since 1.0.0
///
/// @output CSS custom properties
@mixin colors($appearance) {
  & {
    @each $name, $value in map.get(global.$colors, $appearance) {
      --ezp-color-#{$name}: #{$value};
    }

    @media (color-gamut: p3) {
      @supports (color: color(display-p3 1 1 1)) {
        @each $name, $value in map.get(global.$colors, $appearance) {
          --ezp-color-#{$name}: #{convertColorDisplayP3($value)};
        }
      }
    }
  }
}
