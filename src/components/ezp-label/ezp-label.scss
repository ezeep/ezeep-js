/**
 *
 * Modules
 *
 */

@use 'sass:list';
@use './../../shared/global';

/**
 *
 * Variables
 *
 */

$levels: (
  'primary': (
    17px,
    24px,
  ),
  'secondary': (
    14px,
    20px,
  ),
  'tertiary': (
    12px,
    18px,
  ),
);
$weights: (
  'soft': 400,
  'strong': 500,
  'heavy': 600,
);

/**
 *
 * Rules
 *
 */

:host {
  display: block;
  min-width: var(--ezp-label-minWidth, auto);
  padding-bottom: 1px;
  padding-top: 1px;

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
  }

  &::before {
    margin-top: calc((var(--ezp-label-offset) + 1px) * -1);
  }

  &::after {
    margin-bottom: calc((var(--ezp-label-offset) + 1px) * -1);
  }

  @at-root {
    #{&}(.no-wrap) {
      --ezp-label-whiteSpace: nowrap;
    }

    #{&}(.ellipsis) {
      --ezp-label-minWidth: 0;
      --ezp-label-overflow: hidden;
      --ezp-label-textOverflow: ellipsis;
      --ezp-label-whiteSpace: nowrap;
      --ezp-label-width: 100%;
    }
    @each $levelName, $levelProps in $levels {
      #{&}(.#{$levelName}) {
        $fontSize: list.nth($levelProps, 1);
        $lineHeight: list.nth($levelProps, 2);
        $letterSpacing: global.getLetterSpacing($fontSize);
        $offset: global.getOffset($fontSize, $lineHeight);

        --ezp-label-fontSize: #{$fontSize};
        --ezp-label-lineHeight: #{$lineHeight};
        --ezp-label-letterSpacing: #{$letterSpacing};
        --ezp-label-offset: #{$offset};
      }
    }

    @each $weightName, $weightValue in $weights {
      #{&}(.#{$weightName}) {
        --ezp-label-fontWeight: #{$weightValue};
      }
    }
  }
}

#text {
  font-size: var(--ezp-label-fontSize);
  font-weight: var(--ezp-label-fontWeight);
  letter-spacing: var(--ezp-label-letterSpacing);
  line-height: var(--ezp-label-lineHeight);
  overflow: var(--ezp-label-overflow, visible);
  text-overflow: var(--ezp-label-textOverflow, clip);
  white-space: var(--ezp-label-whiteSpace, normal);
  width: var(--ezp-label-width, auto);
}
